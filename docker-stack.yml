version: "3.8"

services:
  traefik:
    image: traefik:v2.6
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=false"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.email=adrien-barbier@hotmail.fr"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.services.traefik.loadbalancer.server.port=8080"
        - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
        - "traefik.http.routers.http-catchall.entrypoints=web"
        - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
        - "traefik.http.routers.traefik.rule=Host(`traefik.goodtobenaked.com`)"
        - "traefik.http.routers.traefik.entrypoints=websecure"
        - "traefik.http.routers.traefik.service=api@internal"
        - "traefik.http.routers.traefik.middlewares=auth"
        - "traefik.http.middlewares.auth.basicauth.users=admin:$apr1$r/k/4P2u$ymeak2FN1yJW9YQdyLCT21"
        - "traefik.http.routers.traefik.tls.certresolver=myresolver"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./acme.json:/letsencrypt/acme.json"

  frontend:
    image: adrienbarb/goodtobenaked-frontend:latest
    environment:
      - NODE_ENV=production
    secrets:
      - NEXTAUTH_SECRET
      - NEXTAUTH_URL
    networks:
      - app-network
    deploy:
      replicas: 2  
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == worker
        preferences:
          - spread: node.id
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.frontend.rule=Host(`goodtobenaked.com`, `www.goodtobenaked.com`)"
        - "traefik.http.routers.frontend.entrypoints=websecure"
        - "traefik.http.services.frontend.loadbalancer.server.port=3000"
        - "traefik.http.routers.frontend.tls=true"
        - "traefik.http.routers.frontend.tls.certresolver=myresolver"
        - "com.newrelic.logs.include=true"
        - "com.newrelic.logs.parser=auto"

  backend:
    image: adrienbarb/goodtobenaked-backend:latest
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
    secrets:
      - JWT_SECRET
      - MONGODB_URI
      - INTERNAL_CLIENT_URL
      - CLIENT_URL
      - MAIL_GUN_API_KEY
      - MAIL_GUN_BASE_URL
      - ADMIN_PRIVATE_KEY
      - STRIPE_API_KEY
      - NOTION_API_KEY
      - SLACK_TOKEN
      - MAILCHIMP_API_KEY
      - S3_BUCKET_MEDIA
      - S3_BUCKET_PROCESSED_MEDIA
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_REGION
      - STRIPE_PUBLISHABLE_KEY
      - STRIPE_ENDPOINT_SECRET
      - CLOUDFRONT_URL
      - PRIVATE_KEY_PATH
      - KEY_PAIR_ID
    networks:
      - app-network
    deploy:
      replicas: 2 
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == worker
        preferences:
          - spread: node.id
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.backend.rule=Host(`api.goodtobenaked.com`, `www.api.goodtobenaked.com`)"
        - "traefik.http.routers.backend.entrypoints=websecure"
        - "traefik.http.services.backend.loadbalancer.server.port=3001"
        - "traefik.http.routers.backend.tls=true"
        - "traefik.http.routers.backend.tls.certresolver=myresolver"
        - "com.newrelic.logs.include=true"
        - "com.newrelic.logs.parser=auto"
        - "traefik.http.services.backend.loadbalancer.sticky.cookie=true"
        - "traefik.http.services.backend.loadbalancer.sticky.cookie.name=backend-sticky"
        - "traefik.http.services.backend.loadbalancer.sticky.cookie.secure=true"
        - "traefik.http.services.backend.loadbalancer.sticky.cookie.httpOnly=true"
    volumes:
      - "./keys:/keys"

  redis:
    image: redis:latest
    networks:
      - app-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  newrelic-infra:
    image: adrienbarb/gtbn-newrelic-infra:latest
    cap_add:
      - SYS_PTRACE
    pid: host
    privileged: true
    volumes:
      - "/:/host:ro"
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      mode: global
      restart_policy:
        condition: any
    networks:
      - app-network

secrets:
  NEXTAUTH_SECRET:
    external: true
  NEXTAUTH_URL:
    external: true
  JWT_SECRET:
    external: true
  MONGODB_URI:
    external: true
  INTERNAL_CLIENT_URL:
    external: true
  CLIENT_URL:
    external: true
  MAIL_GUN_API_KEY:
    external: true
  MAIL_GUN_BASE_URL:
    external: true
  ADMIN_PRIVATE_KEY:
    external: true
  STRIPE_API_KEY:
    external: true
  NOTION_API_KEY:
    external: true
  CLOUDFRONT_URL:
    external: true
  SLACK_TOKEN:
    external: true
  MAILCHIMP_API_KEY:
    external: true
  S3_BUCKET_MEDIA:
    external: true
  S3_BUCKET_PROCESSED_MEDIA:
    external: true
  AWS_ACCESS_KEY_ID:
    external: true
  AWS_SECRET_ACCESS_KEY:
    external: true
  AWS_REGION:
    external: true
  STRIPE_PUBLISHABLE_KEY:
    external: true
  STRIPE_ENDPOINT_SECRET:
    external: true
  CLOUDFRONT_URL:
    external: true
  PRIVATE_KEY_PATH:
    external: true
  KEY_PAIR_ID:
    external: true

networks:
  app-network:
    external: true
