name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_ACCESS_TOKEN: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SERVER_IP: ${{ secrets.SERVER_IP }}
      STAGING_SERVER_IP: ${{ secrets.STAGING_SERVER_IP }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub locally
        run: |
          echo $DOCKERHUB_ACCESS_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin
          mkdir -p ~/.docker
          cat ~/.docker/config.json

      - name: Generate Docker config file
        run: |
          mkdir -p .docker
          echo "{\"auths\": {\"https://index.docker.io/v1/\": {\"auth\": \"$(echo -n $DOCKERHUB_USERNAME:$DOCKERHUB_ACCESS_TOKEN | base64)\"}}}" > .docker/config.json

      - name: Copy Docker config to server
        uses: appleboy/scp-action@v0.1.0
        with:
          host: ${{ env.SERVER_IP }}
          username: root
          key: ${{ env.SSH_PRIVATE_KEY }}
          source: ".docker/config.json"
          target: "/root/.docker/config.json"

      - name: Set environment-specific variables
        id: set-env-vars
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "IMAGE_TAG=prod" >> $GITHUB_ENV
            echo "ARGS=--build-arg NEXT_PUBLIC_INTERNAL_API_URL=http://backend:3001 \
                  --build-arg NEXT_PUBLIC_API_URL=https://api.nastynipples.com/ \
                  --build-arg NEXT_PUBLIC_BASE_URL=https://www.nastynipples.com \
                  --build-arg NEXT_PUBLIC_CLOUDFRONT_MEDIA=https://duz30n69vbwvd.cloudfront.net/" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=staging" >> $GITHUB_ENV
            echo "ARGS=--build-arg NEXT_PUBLIC_INTERNAL_API_URL=http://backend:3001 \
                  --build-arg NEXT_PUBLIC_API_URL=https://api-staging.nastynipples.com/ \
                  --build-arg NEXT_PUBLIC_BASE_URL=https://staging.nastynipples.com \
                  --build-arg NEXT_PUBLIC_CLOUDFRONT_MEDIA=https://d10arthua11ogq.cloudfront.net/" >> $GITHUB_ENV
          fi

      - name: Build and push frontend image
        run: |
          docker buildx build --platform linux/amd64 \
            -t $DOCKERHUB_USERNAME/goodtobenaked-frontend-${{ env.IMAGE_TAG }}:latest \
            $ARGS \
            -f frontend/Dockerfile.prod --push ./frontend

      - name: Build and push backend image
        run: |
          docker buildx build --platform linux/amd64 \
            -t $DOCKERHUB_USERNAME/goodtobenaked-backend-${{ env.IMAGE_TAG }}:latest \
            -f backend/Dockerfile.prod --push ./backend

      - name: Wait for Docker Hub synchronization
        run: sleep 60

      - name: Ensure images are available on all nodes
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ env.SERVER_IP }}
          username: root
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            docker pull $DOCKERHUB_USERNAME/goodtobenaked-backend-${{ env.IMAGE_TAG }}:latest
            docker pull $DOCKERHUB_USERNAME/goodtobenaked-frontend-${{ env.IMAGE_TAG }}:latest
            docker pull traefik:v2.6

      - name: Deploy to server
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ env.SERVER_IP }}
          username: root
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            docker system prune -f
            docker stack deploy --with-registry-auth -c ./docker-stack.yml goodtobenaked

      - name: Deploy to staging server
        if: github.ref == 'refs/heads/staging'
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ env.STAGING_SERVER_IP }}
          username: root
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            docker system prune -f
            docker stack deploy --with-registry-auth -c ./docker-stack-staging.yml goodtobenaked-staging
